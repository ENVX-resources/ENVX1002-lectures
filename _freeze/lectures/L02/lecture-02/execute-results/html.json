{
  "hash": "8d2d0c1ac7f1ef25b16677c8c8fb6e01",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Lecture 02: Introduction to statistical programming\"\nauthor: Januar Harianto\n# format: revealjs\n# fontsize: 16px\nformat: soles-revealjs\nembed-resources: true\n---\n\n\n\n\n# Learning outcomes\n\n\n## After this **week**, you will be able to:\n\n1. Navigate and use the RStudio interface effectively\n2. Execute basic R functions and understand their syntax\n3. Feel confident explaining basic statistical concepts like **samples** and **populations**\n4. Understand and explain measures of **central tendency** (mean, median, mode) clearly and without mathematical jargon\n5. Master different measures of **spread** (range, IQR, variance, standard deviation) through practical examples\n6. Calculate statistical measures using **both R and Excel**\n7. Choose appropriate statistical measures for your biological data and explain your choices\n\n## Quick checklist\n\nBy now you should have...\n\n- [ ] Installed [**R**](https://cran.r-project.org/)\n- [ ] Installed [**RStudio**](https://posit.co/download/rstudio-desktop/)\n- [ ] Created one (or two) documents in [Markdown](https://quarto.org/docs/authoring/markdown-basics.html) using Quarto\n\n# History of statistical programming\n\n## From calculators to computers\n\n::: {layout-ncol=2}\n\n![1800s: Mechanical calculators. [Source](https://upload.wikimedia.org/wikipedia/commons/5/57/Mechanical_calculators_Keyboards.png)](images/calculator1800s.png){height=400 fig-align=\"left\"}\n\n![1960s: Statistical software BMDP and SPSS (not in image). [Source](https://economicsnetwork.ac.uk/cheer/ch10_3/ch10_3p21.htm)](images/bmdp.gif){height=400}\n\n:::\n\n## Statistical software in the 1970s\n\n::: {layout-ncol=2}\n\n![1970s: SAS (Statistical Analysis System) [Source](https://data-flair.training/blogs/sas-software/)](images/sas-stat.webp){height=300 fig-align=\"left\"}\n\n![1976: Birth of S at Bell Labs. S-PLUS debuts in 1988. [Source](https://solutionmetrics.com.au/splus/)](images/splus.png){height=300}\n\n:::\n\n# The R story\n- Created at University of Auckland, New Zealand in 1993\n- Named after creators (Ross & Robert) -- and inspired by S programming language\n- Developed rapidly in the 2000s\n- Designed specifically for statistical computing and graphics, but now used in many fields\n\n![The R graphical user interface. [Source](https://users.ssc.wisc.edu/~hemken/Rworkshops/interface/RConsole.html)](images/rgui.jpeg){fig-align=\"left\"}\n\n## R in today's world\n- Leading tool in data science and statistics (although Python leads in majority of machine learning workflows)\n- Over 22,000 [packages on CRAN](https://cran.r-project.org/web/packages/index.html) -- extensive statistical capabilities\n- Integration with other modern tools: Python, HTML, Javascript, Excel, AJAX...\n- **Meets modern academic standards of reproducibility and increasingly preferred by statisticians**\n\n![RStudio IDE. Source: Januar Harianto](images/rstudio.png){fig-align=\"left\"}\n\n\n# Getting Started with R\n\n## Your RStudio workspace\n\n![](images/rstudio-interface.png)\n\n**Left**: all input, **Right**: all output\n\n## We will always work in Quarto\n\n- A **Markdown-based** authoring tool\n- Allows you to write **reproducible documents** with code and text\n- Outputs to various formats: HTML, PDF, Word, and more\n- [Quarto gallery](https://quarto.org/docs/gallery/)\n\n## How Quarto works\n\n- Write your content in **Markdown** (left panel)\n- View the output in **Preview** (right panel) \n- Quick demo (only available in the live lecture)\n\n![](images/quarto-connection.jpeg)\n\n\n\n## Essential Resources\n\n- Read \"A brief R guide for surviving ENVX1002\" by Dr. Geoffrey Mazue\n  - Available in the Tool Kit section on Canvas\n  - Contains essential R programming tips and best practices for this unit\n- Use the Help panel in RStudio\n\n# Key statistical concepts\n\n## Population vs Sample\n\n::: {.columns}\n::: {.column width=\"50%\"}\n![](images/sample.jpeg)\\\n:::\n\n::: {.column width=\"50%\"}\n###\n\n**Population**\n\n- All possible observations\n- Usually too large to measure\n- Example: All trees in a forest\n\n**Sample**\n\n- **Subset of the population**\n- What we *actually* measure\n- Example: 100 trees measured in a forest\n\n**Most (if not all) statistical analyses are based on samples, not populations.**\n:::\n:::\n\n\n\n## Populations and their samples\n\n| Population | Sample |\n|------------|--------|\n| All koalas in Australia | 150 koalas studied in NSW |\n| Every fish in Sydney Harbour | 300 fish caught in specific locations |\n| All soil bacteria in a forest | Bacteria from 50 soil cores |\n| All cookies in a bakery | Tasting 3 cookies to judge quality |\n| All students at the university | The 200 students in this course |\n| Water quality in the entire ocean | Water samples from specific locations |\n| All trees in a national park | 75 trees measured in random plots |\n| All possible blood test results | Blood samples from 100 patients |\n\n\n\n## How well does a sample represent the population?\n\nIt depends:\n\n- **Sample size**: Larger samples are more likely to represent the population\n- **Sampling method**: Random samples are more likely to be representative\n- **Population variability**: More variability means larger samples are needed\n\nIn reality, we often have to balance these factors due to time, cost, and practical constraints.\n\n## Samples vary\n\nDifferent samples give different results -- suppose we have a population of **1000 trees** and we randomly sample 6 tree heights. If this is done 3 times, it is likely that the samples will be different.\n\nWe have code to demonstrate this but just focus on the results for now:\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\nset.seed(258) \npopulation <- rnorm(1000, mean = 12, sd = 5)\n\n# create samples\nsample1 <- round(sample(population, size = 6), 1)\nsample2 <- round(sample(population, size = 6), 1)\nsample3 <- round(sample(population, size = 6), 1)\n# show samples\nfor (i in 1:3) {\n   cat(sprintf(\"Sample %d: \", i), get(paste0(\"sample\", i)), \"\\n\")\n}\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nSample 1:  13.7 14.6 14.8 9.6 6.5 10 \nSample 2:  7.6 6.1 9.9 10.1 12.5 14.9 \nSample 3:  9.8 7.9 18.4 19.1 7 26.1 \n```\n\n\n:::\n:::\n\n\n\nAre the samples different? *How* different are they?\n\n\n## Descriptive statistics\n\nWe use **descriptive statistics** to summarise and describe data, helping us compare and contrast.\n\n1. **Measures of central tendency** -- describe the \"typical\" value in a sample\n   - mean, median, mode\n2. **Measures of spread** -- describe how much the data varies\n   - standard deviation, variance (commonly used)\n   - range, quartiles, IQR (for unique cases)\n3. **Measures of uncertainty** -- describe how confident we are in our estimates\n   - standard error \n   - confidence intervals\n\n\n# Measures of central tendency\n\n\n## Mean -- also known as the *average*\n\n- Add up all your numbers\n- Divide by how many numbers you have\n\n::: {.callout-note}\n## Mathematical notation\n- Population mean: $\\mu = \\frac{\\sum_{i=1}^{N} x_i}{N}$\n- Sample mean: $\\bar{x} = \\frac{\\sum_{i=1}^{n} x_i}{n}$\n\nWhere $x_i$ is each individual value, $N$ is population size, and $n$ is sample size.\n:::\n\n\n## Mean in Excel\n\n::: {.columns}\n::: {.column width=\"40%\"}\nExcel offers several ways to calculate the mean:\n\n1. **Using AVERAGE function**\n   ```\n   =AVERAGE(A1:A4)\n   ```\n   - Type `=AVERAGE(`\n   - Select cells with your data\n   - Press Enter\n\n2. **Using AutoCalculate**\n   - Select your data cells\n   - Look at bottom right\n   - Average shown automatically\n:::\n\n::: {.column width=\"60%\"}\n![](images/excel-mean.gif)\n:::\n:::\n\n\n\n## Mean in R\n\nI'll show you how to do this in RStudio.\n\n### Step 1: Create a vector of values\n\nIn R, we store data in **vectors** (lists of values):\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"false\"}\n# Create a vector of test scores\nscores <- c(80, 85, 90, 95)\n\n# Display the scores\nscores\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 80 85 90 95\n```\n\n\n:::\n:::\n\n\n\n### Step 2: Calculate\n\n:::: {.columns}\n::: {.column width=\"50%\"}\nEither calculate the mean manually:\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"false\"}\n# Sum divided by count\nsum(scores) / length(scores)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 87.5\n```\n\n\n:::\n:::\n\n\n:::\n::: {.column width=\"50%\"}\nOr use the `mean()` function:\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"false\"}\n# The mean() function does the work for us\nmean(scores)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 87.5\n```\n\n\n:::\n:::\n\n\n:::\n::::\n\n\n## Median -- the middle value\n\nThe median is the middle number when your data is in order:\n\n1. First, put your numbers in order\n2. Find the middle value\n3. If you have an even number of values, take the average of the two middle numbers\n\n::: fragment\nExample: House prices ($'000s): 450, 1100, 480, 460, 470, 420, 1400, 450, 470\n\n::: fragment\nOrder: 450, 450, 420, 460, **470**, 470, 480, 1100, 1400\n:::\n\n::: fragment\n**How is it useful?**\n:::\n:::\n\n## Median in Excel\n\n\nExcel provides two main ways to find the median:\n\n1. **Using MEDIAN function**\n   ```\n   =MEDIAN(A1:A9)\n   ```\n   - Type `=MEDIAN(`\n   - Select your data range\n   - Press Enter\n\n2. **Alternative method**\n   - Sort your data first (use the Sort functionality in the Data tab)\n   - Find middle value(s)\n   - If even number of values, average the middle two\n\n\n## Median in R\n\nR does all the ordering and finding the middle for us:\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"false\"}\n# House prices\nprices <- c(450, 1100, 480, 460, 470, 420, 1400, 450, 470)\n\n# Find median\nmedian(prices)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 470\n```\n\n\n:::\n:::\n\n\n\n::: fragment\nComparing the mean and median:\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"false\"}\n# Compare with mean\nmean(prices)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 633.3333\n```\n\n\n:::\n:::\n\n\n:::\n\n::: fragment\n**Which is a better measure for house prices?**\n:::\n\n\n## Mode -- most frequent value\n\n::: fragment\nThe mode is the value that appears most frequently in your data. It's particularly useful for:\n\n- Categorical data (like blood types, eye colors)\n- Finding the most common item in a group\n- Data that has clear repeated values\n:::\n\n::: fragment\nCalculating the mode can be tricky, especially if there are multiple modes or no mode at all. This is why the mode is not commonly used in statistics.\n:::\n\n::: fragment\n### Questions that the mode can answer\n\n- What is the most common blood type in a population?\n- What is the most common eye color in a group of people?\n:::\n\n## Mode in Excel\n\n\nExcel provides several methods to find the mode but the simplest is to use the MODE function:\n\n\n```\n=MODE(A1:A10)\n```\n- Type `=MODE(`\n- Select your data range\n- Press Enter\n\n\n\n## Mode in R\n\nThere is no built-in function to calculate the mode, so we use the `modeest` package:\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"false\"}\nif(!require(\"modeest\")) install.packages(\"modeest\")\nlibrary(modeest)\n\ndf <- c(1, 2, 3, 3, 4, 5, 5, 5, 6)\nmlv(df, method = \"mfv\")  # most frequent value\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 5\n```\n\n\n:::\n:::\n\n\n\n::: fragment\nIf you were to do it yourself, how would you do it in R? \n:::\n\n::: fragment\n::: {.panel-tabset}\n\n## Using frequencies\nUse the `table()` function to count frequencies:\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"false\"}\nfreq_table <- table(df) # Count frequencies of each value\n# Find which value(s) appear most often\nmodes <- as.numeric(names(freq_table[freq_table == max(freq_table)]))\nmodes\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 5\n```\n\n\n:::\n:::\n\n\n\n## Using run-length encoding\nUse run-length encoding after sorting:\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"false\"}\nsorted_df <- sort(df) # Sort the vector first\nruns <- rle(sorted_df) # Use run-length encoding to find sequences\nmodes <- runs$values[runs$lengths == max(runs$lengths)] # Find the value(s) with max length\nmodes\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 5\n```\n\n\n:::\n:::\n\n\n\n## Using loops\nLoop through the vector and count occurrences:\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"false\"}\nunique_vals <- factor(df) # Create a factor of unique values\ncounts <- tapply(df, unique_vals, length) # Count occurrences using tapply\nmodes <- as.numeric(names(counts[counts == max(counts)])) # Find which values have the maximum count\nmodes\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 5\n```\n\n\n:::\n:::\n\n\n:::\n:::\n\n::: fragment\n**The point is that it doesn't matter how you calculate the mode, as long as you are able to do it.** Also -- if you needed this -- aren't you glad R has a package for it?\n:::\n\n\n\n# Measures of spread\n\n## A biological example\n\n![[Source: Adobe Stock](https://stock.adobe.com/au) # 85659279](images/seagrass.jpg){fig-align=\"left\"}\n\nImagine sampling seagrass blade lengths from two different sites in a marine ecosystem, and they have the same mean length of 15.2 cm. Are both sites the same?\n\n::: fragment\n- **Site A (Protected Bay)**: 15.2, 15.0, 15.3, 15.1, 15.2 centimetres\n- **Site B (Wave-exposed Coast)**: 12.0, 18.0, 14.5, 16.5, 15.0 centimetres\n:::\n\n## Comparing Different Measures\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Plot seagrass lengths\nlibrary(ggplot2)\nlibrary(patchwork)\n\nseagrass_protected <- c(15.2, 15.0, 15.3, 15.1, 15.2)\nseagrass_exposed <- c(12.0, 18.0, 14.5, 16.5, 15.0)\n\n# Create plots for both sites\np1 <- ggplot() +\n   geom_point(aes(x = 1:5, y = seagrass_protected), size = 3) +\n   geom_hline(yintercept = mean(seagrass_protected), linetype = \"dashed\", color = \"red\") +\n   labs(title = \"Site A: Protected Bay\", x = \"Measurement\", y = \"Length (cm)\") +\n   ylim(10, 20)\n\np2 <- ggplot() +\n   geom_point(aes(x = 1:5, y = seagrass_exposed), size = 3) +\n   geom_hline(yintercept = mean(seagrass_exposed), linetype = \"dashed\", color = \"red\") +\n   labs(title = \"Site B: Wave-exposed Coast\", x = \"Measurement\", y = \"Length (cm)\") +\n   ylim(10, 20)\n\n# Combine plots side by side\np1 + p2\n```\n\n::: {.cell-output-display}\n![](lecture-02_files/figure-revealjs/unnamed-chunk-11-1.png){width=960}\n:::\n:::\n\n\n\n## Why do we need measures of spread?\n\n- Central tendency (mean, median, mode) only tells part of the story\n- Spread tells us how much variation exists in our data\n- Different measures of spread tell us different things:\n  - **Range**: Overall spread of data\n  - **IQR**: Spread of middle 50% of data\n  - **Variance**: Average squared deviation from mean\n  - **Standard deviation**: Average deviation in original units\n\n## Range -- The simplest measure of spread\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"false\"}\n# Create our seagrass data\nseagrass_protected <- c(15.2, 15.0, 15.3, 15.1, 15.2)  # Protected bay\nseagrass_exposed <- c(12.0, 18.0, 14.5, 16.5, 15.0)    # Wave-exposed coast\n\n# Calculate ranges\ncat(\"Protected bay range:\", diff(range(seagrass_protected)), \"cm\\n\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nProtected bay range: 0.3 cm\n```\n\n\n:::\n\n```{.r .cell-code  code-fold=\"false\"}\ncat(\"Wave-exposed range:\", diff(range(seagrass_exposed)), \"cm\\n\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nWave-exposed range: 6 cm\n```\n\n\n:::\n:::\n\n\n\n::: {.callout-note}\nThe range shows us that seagrass lengths are much more variable in the wave-exposed site!\n:::\n\n## Interquartile range (IQR): The middle 50%\n\n\nThe IQR tells us how spread out the middle 50% of our data is:\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"false\"}\n# Get quartiles for protected bay\nquantile(seagrass_protected)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  0%  25%  50%  75% 100% \n15.0 15.1 15.2 15.2 15.3 \n```\n\n\n:::\n:::\n\n\n\n- 25% of data below Q1 (1st quartile)\n- 75% of data below Q3 (3rd quartile)\n- IQR = Q3 - Q1\n\n\n\n### Why use IQR?\n- Ignores extreme values\n- Works with skewed data\n- More stable than range\n\n\n## Comparing Sites Using IQR\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"false\"}\n# Compare IQRs\npbay <- IQR(seagrass_protected)\npbay\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 0.1\n```\n\n\n:::\n\n```{.r .cell-code  code-fold=\"false\"}\nexbay <- IQR(seagrass_exposed)\nexbay\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 2\n```\n\n\n:::\n:::\n\n\n\n- Protected bay IQR: 0.1 cm\n- Wave-exposed IQR: 2 cm\n\n::: {.callout-note}\nThe larger IQR in the wave-exposed site shows more spread in the typical seagrass lengths\n:::\n\n## Variance: a detailed measure of spread\n\nVariance measures how far data points are spread from their mean by:\n\n1. Finding how far each point is from the mean\n2. Squaring these distances (to handle negative values)\n3. Taking the average of these squared distances\n\n\n### Why use variance?\n\n- Uses **all** data points (unlike IQR)\n- Less sensitive to outliers than range\n- Shows total spread in both directions\n\n\n::: fragment\n### Key points\n- Measured in squared units (cm²)\n- Larger variance = more spread\n:::\n\n## Calculating Variance in R\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\n# Calculate variance for both sites\ncat(\"Protected bay variance:\", var(seagrass_protected), \"cm²\\n\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nProtected bay variance: 0.013 cm²\n```\n\n\n:::\n\n```{.r .cell-code  code-fold=\"true\"}\ncat(\"Wave-exposed variance:\", var(seagrass_exposed), \"cm²\\n\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nWave-exposed variance: 5.075 cm²\n```\n\n\n:::\n:::\n\n\n\n::: {.callout-note}\nThe larger variance in wave-exposed site shows more spread from the mean!\n:::\n\n\n\n\n## Standard deviation: a more interpretable measure\n\nStandard deviation (SD, or $\\sigma$ for population, $s$ for sample) is the square root of variance:\n\n- Tells us the \"typical distance\" from the mean\n- Easy to understand - similar to saying \"± value\" after a mean\n- Small SD means values cluster closely around mean\n- Large SD means values are more spread out\n\n### When and why to use it\n- Values are in the **same units** as your data (unlike variance)\n- Perfect for describing natural variation (height, weight, temperature)\n- Used in many statistical tests\n- Great for comparing different groups or datasets\n\n\n## Interpreting standard deviation (with R)\n\nWe can describe our seagrass lengths using mean ± standard deviation:\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"false\"}\n# Protected bay\nmean_p <- mean(seagrass_protected)\nsd_p <- sd(seagrass_protected)\ncat(\"Protected bay:\", round(mean_p, 1), \"±\", round(sd_p, 2), \"cm\\n\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nProtected bay: 15.2 ± 0.11 cm\n```\n\n\n:::\n\n```{.r .cell-code  code-fold=\"false\"}\n# Wave-exposed\nmean_e <- mean(seagrass_exposed)\nsd_e <- sd(seagrass_exposed)\ncat(\"Wave-exposed:\", round(mean_e, 1), \"±\", round(sd_e, 2), \"cm\\n\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nWave-exposed: 15.2 ± 2.25 cm\n```\n\n\n:::\n:::\n\n\n\n::: {.callout-tip}\nThe ± tells us about the typical variation around the mean. Larger values indicate more spread!\n:::\n\n\n\n## Comparing spread measures\n\n| Measure | Protected Bay | Wave-exposed Coast | What it Tells Us |\n|---------|:------------:|:-----------------:|------------------|\n| Range | 0.3 cm | 6 cm | Overall spread (sensitive to outliers) |\n| IQR | 0.1 cm | 2 cm | Middle 50% spread (ignores extremes) |\n| Variance | 0.01 cm² | 5.07 cm² | Average squared distance from mean |\n| SD | 0.11 cm | 2.25 cm | Average distance from mean (in original units) |\n\n### Key Observations\n- Wave-exposed site shows consistently more variation\n- Each measure gives a different perspective\n- Choose based on your data and goals\n- Standard deviation is most commonly used in research papers\n\n\n## Range and IQR in Excel\n\nCommon Excel functions for measuring spread:\n\n1. **Range**: Use `MAX()` and `MIN()`\n```\n=MAX(A1:A10) - MIN(A1:A10)\n```\n\n2. **Quartiles and IQR**: Use `QUARTILE.INC()`\n```\nFor Q1: =QUARTILE.INC(A1:A10, 1)\nFor Q3: =QUARTILE.INC(A1:A10, 3)\nFor IQR: =QUARTILE.INC(A1:A10, 3) - QUARTILE.INC(A1:A10, 1)\n```\n\n## Variance and standard deviation in Excel\n\nStatistical functions for variance and standard deviation:\n\n1. **Sample Variance**: Use `VAR.S()`\n```\n=VAR.S(A1:A10)\n```\n\n2. **Sample Standard Deviation**: Use `STDEV.S()`\n```\n=STDEV.S(A1:A10)\n```\n\n::: {.callout-tip}\n## Tip\nUse `.P` instead of `.S` for population measures:\n\n- `VAR.P()` for population variance\n- `STDEV.P()` for population standard deviation\n:::\n\n\n# References and Resources\n\n## Core Reading\n- Quinn & Keough (2024). *Experimental Design and Data Analysis for Biologists*. Cambridge University Press. **Chapter 2**: Things to know before proceeding.\n- Canvas site for lecture notes and additional resources\n\n\n# Thanks!\n\nThis presentation is based on the [SOLES Quarto reveal.js template](https://github.com/usyd-soles-edu/soles-revealjs) and is licensed under a [Creative Commons Attribution 4.0 International License][cc-by].\n\n<!-- Links -->\n[cc-by]: http://creativecommons.org/licenses/by/4.0/\n\n",
    "supporting": [
      "lecture-02_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}