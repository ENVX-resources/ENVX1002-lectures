{
  "hash": "e6aff25bbd847f565789dc8f4d32ce44",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Lecture 03: Exploring and visualising data\"\nauthor: Januar Harianto\nformat: soles-revealjs\nembed-resources: false\nexecute:\n  cache: true\n---\n\n\n\n\n\n# Learning outcomes\n\n## After this **week**, you will be able to:\n\n1. Understand the importance of data exploration before analysis\n2. Apply exploratory functions to explore and summarise datasets\n3. Identify different data types and structures in datasets\n4. Select appropriate visualization types based on data characteristics\n5. Understand the Grammar of Graphics approach to data visualisation\n6. Create and customise visualisations in R using the ggplot2 package\n7. Build plots layer-by-layer using the ggplot2 framework\n8. Interpret distributions, including skewness, kurtosis, and outliers\n\n## Quick checklist\n\nBy now you should have...\n\n- [ ] Installed [**R**](https://cran.r-project.org/) and [**RStudio**](https://posit.co/download/rstudio-desktop/)\n- [ ] Completed Lecture 2 content and read the ENVX1002 R guide\n- [ ] A basic understanding of measures of central tendency and spread\n- [ ] A basic understanding of what a `function(argument = value)` is in R\n- [ ] Rendered a few Quarto documents in RStudio\n\n# Core concepts\n\n## Data exploration\n\n### Why explore data before analysis?\n- Identify patterns, outliers, and relationships\n- Detect data quality issues\n- Guide selection of appropriate statistical methods\n- Avoid incorrect conclusions from flawed data\n\n### The data exploration workflow\n  1. Understand data structure and types\n  2. Examine distributions and summary statistics\n  3. Visualise relationships between variables\n  4. Identify patterns and anomalies\n\n## Types of data: recap from Week 1\n\nData in R can be broadly categorized as either **categorical** or **continuous**.\n\n- Different data types require different analysis approaches\n- Understanding data types helps select appropriate visualisations\n- **R stores different data types in specific formats** (which is why we need to know what they are when we import data!)\n\n## Categorical data\n\n- **Nominal**: no natural order, e.g.\n  - Species (dog, cat, fish)\n  - Hair colour (black, brown, blonde)\n  - Blood type (A, B, AB, O)\n\n- **Ordinal**: natural order exists, e.g.\n  - Education (primary, secondary, tertiary)\n  - Pain scale (mild, moderate, severe)\n  - T-shirt sizes (S, M, L, XL)\n\n## Continuous data\n\n- **Interval**: equal intervals, no true zero, e.g.\n  - Temperature in °C (0°C isn't \"no temperature\")\n  - Calendar dates\n  - pH scale\n\n- **Ratio**: equal intervals with true zero, e.g.\n  - Height (0 cm = no height)\n  - Weight (0 kg = no weight)\n  - Age (0 years = birth)\n\n\n# Different types of data are distributed differently\n\nUnderstanding how data is distributed is crucial for selecting appropriate ways to explain it to others.\n\n\n## Normal distribution: Introduction\n\n- Bell-shaped, symmetric curve\n- Defined by mean (μ) and standard deviation ($\\sigma$)\n- Many natural phenomena follow this distribution\n  - Heights of individuals in a population\n  - Measurement errors\n  - Many physiological traits\n\n$$X \\sim N(\\mu, \\sigma^2)$$\n\n> The random variable X follows a normal distribution with mean $\\mu$ and variance $\\sigma^2$\n\n## What does a normal distribution look like?\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Generate normal distribution data\nset.seed(123)\nnormal_data <- rnorm(1000, mean = 0, sd = 1)\n\n# Plot normal distribution\nggplot(data.frame(x = normal_data), aes(x = x)) +\n  geom_histogram(aes(y = after_stat(density)),\n                 bins = 30,\n                 fill = \"skyblue\",\n                 colour = \"black\") +\n  geom_density(colour = \"red\") +\n  labs(title = \"Standard Normal Distribution (μ = 0, σ = 1)\",\n       x = \"Value\",\n       y = \"Density\")\n```\n\n::: {.cell-output-display}\n![](lecture-03_files/figure-revealjs/normal_dist_plot-1.png){width=960}\n:::\n:::\n\n\n\n## Properties of normal distribution: The empirical rule\n\n- Mean = median = mode\n- ~68% of data within 1$\\sigma$ of mean\n- ~95% of data within 2$\\sigma$ of mean\n- ~99.7% of data within 3$\\sigma$ of mean\n\n\n## The empirical rule visualised\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Create a standard normal distribution\nx <- seq(-4, 4, length.out = 1000)\ny <- dnorm(x)\ndf <- data.frame(x = x, y = y)\n\n# Plot with empirical rule highlighted\nggplot(df, aes(x = x, y = y)) +\n  geom_line() +\n  # Add vertical reference lines at standard deviations\n  geom_vline(xintercept = c(-3, -2, -1, 0, 1, 2, 3), linetype = \"dashed\", colour = \"gray50\", alpha = 0.7) +\n  geom_area(data = subset(df, x >= -1 & x <= 1), fill = \"darkblue\", alpha = 0.3) +\n  geom_area(data = subset(df, (x >= -2 & x < -1) | (x > 1 & x <= 2)), fill = \"darkgreen\", alpha = 0.3) +\n  geom_area(data = subset(df, (x >= -3 & x < -2) | (x > 2 & x <= 3)), fill = \"darkred\", alpha = 0.3) +\n  annotate(\"text\", x = 0, y = 0.2, label = \"68%\", colour = \"darkblue\") +\n  annotate(\"text\", x = 1.5, y = 0.1, label = \"95%\", colour = \"darkgreen\") +\n  annotate(\"text\", x = 2.5, y = 0.05, label = \"99.7%\", colour = \"darkred\") +\n  labs(title = \"Normal Distribution: Empirical Rule\",\n       x = \"Standard Deviations from Mean\",\n       y = \"Density\")\n```\n\n::: {.cell-output-display}\n![](lecture-03_files/figure-revealjs/normal_empirical_rule-1.png){width=960}\n:::\n:::\n\n\n\n## Why normal distributions matter in data exploration\n\nWhen exploring data, understanding distributions helps you:\n\n1. **Identify patterns and anomalies**\n   - Is your data normally distributed as expected?\n   - Are there unexpected skews or outliers?\n\n2. **Choose appropriate analysis methods**\n   - Many statistical tests assume normality\n   - Non-normal data may require different approaches\n\n3. **Interpret results correctly**\n   - Context for understanding how unusual a value is\n   - Framework for making statistical inferences\n\n## Example\n\nMany biological traits follow normal distributions. For example, plant heights within a species:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Simulate plant height data\nset.seed(456)\nplant_heights <- rnorm(200, mean = 25, sd = 3)  # Heights in cm\n\n# Plot the distribution\nggplot(data.frame(height = plant_heights), aes(x = height)) +\n  geom_histogram(aes(y = after_stat(density)),\n                 bins = 20,\n                 fill = \"#66c2a5\",\n                 colour = \"black\") +\n  geom_density(colour = \"#1f78b4\", linewidth = 1) +\n  geom_vline(xintercept = 25, linetype = \"dashed\", colour = \"red\") +\n  annotate(\"text\", x = 25.5, y = 0.05, label = \"μ = 25 cm\", colour = \"red\") +\n  labs(title = \"Distribution of Plant Heights in a Population\",\n       subtitle = \"Example of a biological trait following normal distribution\",\n       x = \"Height (cm)\",\n       y = \"Density\")\n```\n\n::: {.cell-output-display}\n![](lecture-03_files/figure-revealjs/plant_height_example-1.png){width=960}\n:::\n:::\n\n\n\nThis example shows how plant heights cluster around the mean (25 cm) following a normal distribution pattern. This helps researchers identify outliers, establish experimental categories, and detect environmental effects on growth patterns.\n\n## Skewness\n\n### What is skewness?\n\n- Measure of asymmetry in a distribution\n- Indicates which side of the distribution has a longer tail\n- Important for selecting appropriate statistical tests\n\n## Positive skew (right-skewed)\n\n- Long tail on right side\n- Mean > median\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Generate positive skewed distribution\nset.seed(123)\nright_skewed <- exp(rnorm(1000, 0, 0.5))\n\n# Calculate statistics\nmean_val <- mean(right_skewed)\nmedian_val <- median(right_skewed)\n\n# Plot positive skewed distribution\nggplot(data.frame(x = right_skewed), aes(x = x)) +\n  geom_histogram(aes(y = after_stat(density)),\n                 bins = 30,\n                 fill = \"#66c2a5\", # colourblind-friendly green\n                 colour = \"black\") +\n  geom_density(colour = \"#1f78b4\", linewidth = 1) +\n  # Add vertical lines for mean and median\n  geom_vline(xintercept = mean_val, colour = \"red\", linetype = \"dashed\", linewidth = 1) +\n  geom_vline(xintercept = median_val, colour = \"blue\", linetype = \"dashed\", linewidth = 1) +\n  # Add annotations\n  annotate(\"text\", x = mean_val + 0.2, y = 0.5, label = paste(\"Mean =\", round(mean_val, 2)), colour = \"red\") +\n  annotate(\"text\", x = median_val - 0.2, y = 0.4, label = paste(\"Median =\", round(median_val, 2)), colour = \"blue\") +\n  labs(title = \"Positive skew (right-skewed)\",\n       subtitle = \"Note that Mean > Median\",\n       x = \"Value\",\n       y = \"Density\")\n```\n\n::: {.cell-output-display}\n![](lecture-03_files/figure-revealjs/positive_skew_plot-1.png){width=960}\n:::\n:::\n\n\n\n## Negative skew (left-skewed)\n\n- Long tail on left side\n- Mean < median\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Generate skewed distributions\nset.seed(123)\nleft_skewed <- max(right_skewed) - right_skewed + min(right_skewed)\n\n# Calculate statistics\nmean_val <- mean(left_skewed)\nmedian_val <- median(left_skewed)\n\n# Plot negative skewed distribution\nggplot(data.frame(x = left_skewed), aes(x = x)) +\n  geom_histogram(aes(y = after_stat(density)),\n                 bins = 30,\n                 fill = \"#8da0cb\", # colourblind-friendly blue\n                 colour = \"black\") +\n  geom_density(colour = \"#1f78b4\", linewidth = 1) +\n  # Add vertical lines for mean and median\n  geom_vline(xintercept = mean_val, colour = \"red\", linetype = \"dashed\", linewidth = 1) +\n  geom_vline(xintercept = median_val, colour = \"blue\", linetype = \"dashed\", linewidth = 1) +\n  # Add annotations\n  annotate(\"text\", x = mean_val - 0.2, y = 0.5, label = paste(\"Mean =\", round(mean_val, 2)), colour = \"red\") +\n  annotate(\"text\", x = median_val + 0.2, y = 0.4, label = paste(\"Median =\", round(median_val, 2)), colour = \"blue\") +\n  labs(title = \"Negative skew (left-skewed)\",\n       subtitle = \"Note that Mean < Median\",\n       x = \"Value\",\n       y = \"Density\")\n```\n\n::: {.cell-output-display}\n![](lecture-03_files/figure-revealjs/negative_skew_plot-1.png){width=960}\n:::\n:::\n\n\n\n## Kurtosis\n\n- Measure of \"tailedness\" of a distribution\n- Describes the shape of a distribution's tails relative to its overall shape\n- Affects the choice of statistical methods\n\n### Types of kurtosis\n- **Mesokurtic**: Normal distribution (kurtosis = 3)\n- **Leptokurtic**: Sharper peak, heavier tails (kurtosis > 3)\n- **Platykurtic**: Flatter peak, thinner tails (kurtosis < 3)\n\n## Visualising kurtosis\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Generate distributions with different kurtosis\nset.seed(123)\nnormal <- rnorm(1000, 0, 1)  # Mesokurtic\nleptokurtic <- rt(1000, df = 5)  # t-distribution with 5 df is leptokurtic\nplatykurtic <- runif(1000, -3, 3)  # Uniform distribution is platykurtic\n\n# Calculate kurtosis values (using e1071 package)\nlibrary(e1071)\nk_normal <- kurtosis(normal)\nk_lepto <- kurtosis(leptokurtic)\nk_platy <- kurtosis(platykurtic)\n\n# Plot distributions\np1 <- ggplot(data.frame(x = normal), aes(x = x)) +\n  geom_histogram(aes(y = after_stat(density)), bins = 30,\n                 fill = \"#a6cee3\", # colourblind-friendly blue\n                 colour = \"black\") +\n  geom_density(colour = \"#1f78b4\", linewidth = 1) + # Darker blue\n  annotate(\"text\", x = 2, y = 0.3,\n           label = paste(\"Kurtosis =\", round(k_normal, 2)),\n           colour = \"#1f78b4\") +\n  labs(title = \"Mesokurtic (normal)\",\n       subtitle = \"Normal distribution with balanced tails\",\n       x = \"Value\",\n       y = \"Density\")\n\np2 <- ggplot(data.frame(x = leptokurtic), aes(x = x)) +\n  geom_histogram(aes(y = after_stat(density)), bins = 30,\n                 fill = \"#fb9a99\", # colourblind-friendly pink\n                 colour = \"black\") +\n  geom_density(colour = \"#e31a1c\", linewidth = 1) + # Darker red\n  annotate(\"text\", x = 2, y = 0.3,\n           label = paste(\"Kurtosis =\", round(k_lepto, 2)),\n           colour = \"#e31a1c\") +\n  labs(title = \"Leptokurtic (heavy-tailed)\",\n       subtitle = \"Sharper peak, heavier tails\",\n       x = \"Value\",\n       y = \"Density\")\n\np3 <- ggplot(data.frame(x = platykurtic), aes(x = x)) +\n  geom_histogram(aes(y = after_stat(density)), bins = 30,\n                 fill = \"#b2df8a\", # colourblind-friendly green\n                 colour = \"black\") +\n  geom_density(colour = \"#33a02c\", linewidth = 1) + # Darker green\n  annotate(\"text\", x = 0, y = 0.15,\n           label = paste(\"Kurtosis =\", round(k_platy, 2)),\n           colour = \"#33a02c\") +\n  labs(title = \"Platykurtic (light-tailed)\",\n       subtitle = \"Flatter peak, thinner tails\",\n       x = \"Value\",\n       y = \"Density\")\n\n# Display plots vertically\nlibrary(patchwork)\np1 + p2 + p3\n```\n\n::: {.cell-output-display}\n![](lecture-03_files/figure-revealjs/kurtosis_plots_combined-1.png){width=960}\n:::\n:::\n\n\n\n\n# Exploring data in R\n\n\n\n## Data structures in R\n\nData is stored in R in various structures, each with specific purposes:\n\n**Vectors**: 1-dimensional collection of elements\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Vector - 1-dimensional collection of elements\nheights <- c(1.65, 1.70, 1.75, 1.80, 1.85)\nheights\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 1.65 1.70 1.75 1.80 1.85\n```\n\n\n:::\n:::\n\n\n\n**Data frames**: 2-dimensional tables with rows and columns\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Data frame - 2-dimensional table\ndf <- data.frame(\n  species = c(\"A\", \"B\", \"C\", \"A\", \"B\"),\n  height = c(1.65, 1.70, 1.75, 1.80, 1.85),\n  weight = c(60, 65, 70, 75, 80)\n)\ndf\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  species height weight\n1       A   1.65     60\n2       B   1.70     65\n3       C   1.75     70\n4       A   1.80     75\n5       B   1.85     80\n```\n\n\n:::\n:::\n\n\n\n**Other data structures** include lists, matrices, arrays, and factors, but these are less common at your level.\n\n\n\n## Common functions\n\nUse these essential functions to understand your data structure and summary statistics:\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"false\"}\n# Core function 1: Structure overview\nstr(df)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n'data.frame':\t5 obs. of  3 variables:\n $ species: chr  \"A\" \"B\" \"C\" \"A\" ...\n $ height : num  1.65 1.7 1.75 1.8 1.85\n $ weight : num  60 65 70 75 80\n```\n\n\n:::\n\n```{.r .cell-code  code-fold=\"false\"}\n# Core function 2: Statistical summary\nsummary(df)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n   species              height         weight  \n Length:5           Min.   :1.65   Min.   :60  \n Class :character   1st Qu.:1.70   1st Qu.:65  \n Mode  :character   Median :1.75   Median :70  \n                    Mean   :1.75   Mean   :70  \n                    3rd Qu.:1.80   3rd Qu.:75  \n                    Max.   :1.85   Max.   :80  \n```\n\n\n:::\n:::\n\n\n\nThe `summary()` function provides a quick overview of your data and can help identify skewness, outliers, and missing values...but it isn't always enough.\n\n## Your options are endless (almost)\n\nThere are many specialised functions for exploring different aspects of your data:\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"false\"}\n# Check for unique values in categorical variables\nunique(df$species)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"A\" \"B\" \"C\"\n```\n\n\n:::\n\n```{.r .cell-code  code-fold=\"false\"}\n# Visualise missing data patterns\nlibrary(naniar)\nvis_miss(airquality)\n```\n\n::: {.cell-output-display}\n![](lecture-03_files/figure-revealjs/additional_exploration_combined-1.png){width=960}\n:::\n:::\n\n\n\n## The value of data visualisation\n\nThe output of `vis_mis()` cleary demonstrates the advantage of a **visual** approach to data exploration.\n\n::: {.fragment}\nCompare the visualisation to looking at the raw data or a summary of the raw data\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"false\"}\nairquality$Ozone\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  [1]  41  36  12  18  NA  28  23  19   8  NA   7  16  11  14  18  14  34   6\n [19]  30  11   1  11   4  32  NA  NA  NA  23  45 115  37  NA  NA  NA  NA  NA\n [37]  NA  29  NA  71  39  NA  NA  23  NA  NA  21  37  20  12  13  NA  NA  NA\n [55]  NA  NA  NA  NA  NA  NA  NA 135  49  32  NA  64  40  77  97  97  85  NA\n [73]  10  27  NA   7  48  35  61  79  63  16  NA  NA  80 108  20  52  82  50\n [91]  64  59  39   9  16  78  35  66 122  89 110  NA  NA  44  28  65  NA  22\n[109]  59  23  31  44  21   9  NA  45 168  73  NA  76 118  84  85  96  78  73\n[127]  91  47  32  20  23  21  24  44  21  28   9  13  46  18  13  24  16  13\n[145]  23  36   7  14  30  NA  14  18  20\n```\n\n\n:::\n\n```{.r .cell-code  code-fold=\"false\"}\nsummary(airquality$Ozone)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max.    NA's \n   1.00   18.00   31.50   42.13   63.25  168.00      37 \n```\n\n\n:::\n:::\n\n\n:::\n\n## Common plot types and their applications\n\nDifferent types of data require different visualisation approaches. Let's explore the most common plot types and when to use them.\n\n## Histograms\n\n**Purpose and applications:**\n\n- Visualise distribution of continuous data\n- Identify central tendency, spread, outliers, and skewness\n- Examine distributions of measurements in biological data\n\n**When to use:**\n\n- For continuous variables (interval or ratio data)\n- When you want to understand the shape of a distribution\n- Examples: heights, weights, temperatures, measurements\n\n##\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Example using base R with palmerpenguins data\nhist(penguins$body_mass_g,\n     main = \"Distribution of Penguin Body Mass\",\n     xlab = \"Body Mass (g)\",\n     col = \"skyblue\",\n     border = \"white\")\n```\n\n::: {.cell-output-display}\n![](lecture-03_files/figure-revealjs/histogram_base_example-1.png){width=960}\n:::\n:::\n\n\n\n## Bar plots\n\n**Purpose and applications:**\n\n- Compare values across categories\n- Show proportions or counts in categorical data\n- Visualise species abundance, treatment effects\n\n**When to use:**\n\n- For categorical variables (nominal or ordinal data)\n- When comparing frequencies or counts across groups\n- Examples: species counts, treatment groups, survey responses\n\n##\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Example using base R with palmerpenguins data\nspecies_counts <- table(penguins$species)\nbarplot(species_counts,\n        main = \"Count of Penguins by Species\",\n        xlab = \"Species\",\n        ylab = \"Count\",\n        col = c(\"darkorange\", \"purple\", \"cyan4\"),\n        border = \"white\")\n```\n\n::: {.cell-output-display}\n![](lecture-03_files/figure-revealjs/barplot_base_example-1.png){width=960}\n:::\n:::\n\n\n\n## Scatterplots\n\n**Purpose and applications:**\n\n- Examine relationships between continuous variables\n- Identify correlations, patterns, and outliers\n- Explore relationships between measurements\n\n**When to use:**\n\n- When examining relationships between two continuous variables\n- When looking for correlations or patterns\n- Examples: height vs. weight, temperature vs. growth rate\n\n##\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Example using base R with palmerpenguins data\n# Remove NA values for this example\npenguins_clean <- na.omit(penguins[, c(\"flipper_length_mm\", \"body_mass_g\")])\nplot(penguins_clean$flipper_length_mm, penguins_clean$body_mass_g,\n     main = \"Relationship Between Flipper Length and Body Mass\",\n     xlab = \"Flipper Length (mm)\",\n     ylab = \"Body Mass (g)\",\n     pch = 19,\n     col = \"darkblue\")\n```\n\n::: {.cell-output-display}\n![](lecture-03_files/figure-revealjs/scatterplot_base_example-1.png){width=960}\n:::\n:::\n\n\n\n## Boxplots\n\n**Purpose and applications:**\n\n- Compare distributions across groups\n- Visualise median, quartiles, and outliers\n- Compare measurements across treatments\n\n**When to use:**\n\n- When comparing a continuous variable across categorical groups\n- When you need to show the spread and central tendency\n- Examples: comparing heights across species, measurements across treatments\n\n##\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Example using base R with palmerpenguins data\nboxplot(body_mass_g ~ species, data = penguins,\n        main = \"Body Mass by Penguin Species\",\n        xlab = \"Species\",\n        ylab = \"Body Mass (g)\",\n        col = c(\"darkorange\", \"purple\", \"cyan4\"),\n        border = \"black\")\n```\n\n::: {.cell-output-display}\n![](lecture-03_files/figure-revealjs/boxplot_base_example-1.png){width=960}\n:::\n:::\n\n\n\n# Introduction to ggplot2\n\n## The Grammar of Graphics\n\n**ggplot2** is based on the Grammar of Graphics, a systematic approach to creating visualisations by combining different components:\n\n1. **Data**: The dataset you want to visualise\n2. **Aesthetics**: Mapping variables to visual properties (position, colour, size, etc.)\n3. **Geometries**: The shapes used to represent the data (points, lines, bars, etc.)\n4. **Scales**: How values are mapped to visual properties\n5. **Facets**: How to split the data into subplots\n6. **Coordinates**: The coordinate system to use\n7. **Themes**: Visual styling of the plot\n\nThis grammar allows you to build complex visualisations layer by layer.\n\n## Why use ggplot2?\n\n- **Consistent syntax** across different plot types\n- **Layered approach** makes it easy to build complex visualisations\n- **Excellent defaults** that produce publication-quality graphics\n- **Highly customisable** with extensive options for fine-tuning\n- **Large community** with extensive documentation and examples\n\n## Building a plot: Step 1 - Start with data\n\nLet's build a scatterplot of penguin flipper length vs. body mass using the palmerpenguins dataset.\n\nFirst, we need to load the ggplot2 package and prepare our data:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(ggplot2)\n# Remove missing values for this example\npenguins_clean <- na.omit(penguins)\n\n# Look at the first few rows of our data\nhead(penguins_clean[, c(\"species\", \"flipper_length_mm\", \"body_mass_g\")])\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 × 3\n  species flipper_length_mm body_mass_g\n  <fct>               <int>       <int>\n1 Adelie                181        3750\n2 Adelie                186        3800\n3 Adelie                195        3250\n4 Adelie                193        3450\n5 Adelie                190        3650\n6 Adelie                181        3625\n```\n\n\n:::\n:::\n\n\n\n## Building a plot: Step 2 - Create a blank canvas\n\nThe `ggplot()` function initialises a plot with data:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Create a blank canvas with our data\np <- ggplot(penguins_clean)\np\n```\n\n::: {.cell-output-display}\n![](lecture-03_files/figure-revealjs/ggplot2_step2-1.png){width=960}\n:::\n:::\n\n\n\nThis creates an empty plot. We need to add layers to visualise our data.\n\n## Building a plot: Step 3 - Add aesthetics\n\nAesthetics map variables in the data to visual properties:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Add aesthetics mapping\np <- ggplot(penguins_clean, aes(x = flipper_length_mm, y = body_mass_g))\np\n```\n\n::: {.cell-output-display}\n![](lecture-03_files/figure-revealjs/ggplot2_step3-1.png){width=960}\n:::\n:::\n\n\n\nWe've defined which variables go on which axes, but we still need to specify how to represent the data.\n\n## Building a plot: Step 4 - Add a geometry\n\nGeometries define how the data is represented visually:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Add points geometry\np <- ggplot(penguins_clean, aes(x = flipper_length_mm, y = body_mass_g)) +\n  geom_point()\np\n```\n\n::: {.cell-output-display}\n![](lecture-03_files/figure-revealjs/ggplot2_step4-1.png){width=960}\n:::\n:::\n\n\n\nNow we can see the relationship between flipper length and body mass!\n\n## Building a plot: Step 5 - Add colour by species\n\nWe can map the species variable to the colour aesthetic:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# colour points by species\np <- ggplot(penguins_clean, aes(x = flipper_length_mm, y = body_mass_g, colour = species)) +\n  geom_point()\np\n```\n\n::: {.cell-output-display}\n![](lecture-03_files/figure-revealjs/ggplot2_step5-1.png){width=960}\n:::\n:::\n\n\n\nNotice how ggplot2 automatically creates a legend for the species colours.\n\n## Building a plot: Step 6 - Customise point appearance\n\nWe can adjust the size and transparency of points:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Customize point appearance\np <- ggplot(penguins_clean, aes(x = flipper_length_mm, y = body_mass_g, colour = species)) +\n  geom_point(size = 3, alpha = 0.7)\np\n```\n\n::: {.cell-output-display}\n![](lecture-03_files/figure-revealjs/ggplot2_step6-1.png){width=960}\n:::\n:::\n\n\n\n## Building a plot: Step 7 - Add labels and title\n\nLet's add informative labels and a title:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Add labels and title\np <- ggplot(penguins_clean, aes(x = flipper_length_mm, y = body_mass_g, colour = species)) +\n  geom_point(size = 3, alpha = 0.7) +\n  labs(\n    title = \"Relationship Between Flipper Length and Body Mass\",\n    subtitle = \"Palmer Penguins Dataset\",\n    x = \"Flipper Length (mm)\",\n    y = \"Body Mass (g)\",\n    colour = \"Penguin Species\"\n  )\np\n```\n\n::: {.cell-output-display}\n![](lecture-03_files/figure-revealjs/ggplot2_step7-1.png){width=960}\n:::\n:::\n\n\n\n## Building a plot: Step 8 - Customise colours\n\nWe can use a custom colour palette:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Customize colours\np <- ggplot(penguins_clean, aes(x = flipper_length_mm, y = body_mass_g, colour = species)) +\n  geom_point(size = 3, alpha = 0.7) +\n  scale_colour_manual(values = c(\"darkorange\", \"purple\", \"cyan4\")) +\n  labs(\n    title = \"Relationship Between Flipper Length and Body Mass\",\n    subtitle = \"Palmer Penguins Dataset\",\n    x = \"Flipper Length (mm)\",\n    y = \"Body Mass (g)\",\n    colour = \"Penguin Species\"\n  )\np\n```\n\n::: {.cell-output-display}\n![](lecture-03_files/figure-revealjs/ggplot2_step8-1.png){width=960}\n:::\n:::\n\n\n\n## Building a plot: Step 9 - Apply a theme\n\nFinally, let's apply a theme to change the overall appearance:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Apply a theme\np <- ggplot(penguins_clean, aes(x = flipper_length_mm, y = body_mass_g, colour = species)) +\n  geom_point(size = 3, alpha = 0.7) +\n  scale_colour_manual(values = c(\"darkorange\", \"purple\", \"cyan4\")) +\n  labs(\n    title = \"Relationship Between Flipper Length and Body Mass\",\n    subtitle = \"Palmer Penguins Dataset\",\n    x = \"Flipper Length (mm)\",\n    y = \"Body Mass (g)\",\n    colour = \"Penguin Species\"\n  ) +\n  theme_minimal() +\n  theme(\n    legend.position = \"bottom\",\n    plot.title = element_text(face = \"bold\"),\n    axis.title = element_text(face = \"italic\")\n  )\np\n```\n\n::: {.cell-output-display}\n![](lecture-03_files/figure-revealjs/ggplot2_step9-1.png){width=960}\n:::\n:::\n\n\n\n## Adding more layers: Trend lines\n\nOne of the strengths of ggplot2 is the ability to add multiple layers:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Add trend lines for each species\np + geom_smooth(method = \"lm\", se = FALSE)\n```\n\n::: {.cell-output-display}\n![](lecture-03_files/figure-revealjs/ggplot2_trendlines-1.png){width=960}\n:::\n:::\n\n\n\n## Faceting: Split by species\n\nWe can also split the plot into facets by species:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Create facets by species\np + facet_wrap(~ species)\n```\n\n::: {.cell-output-display}\n![](lecture-03_files/figure-revealjs/ggplot2_facets-1.png){width=960}\n:::\n:::\n\n\n\n## The complete ggplot2 code\n\nHere's the complete code for our final plot:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(penguins_clean, aes(x = flipper_length_mm, y = body_mass_g, colour = species)) +\n  geom_point(size = 3, alpha = 0.7) +\n  scale_colour_manual(values = c(\"darkorange\", \"purple\", \"cyan4\")) +\n  labs(\n    title = \"Relationship Between Flipper Length and Body Mass\",\n    subtitle = \"Palmer Penguins Dataset\",\n    x = \"Flipper Length (mm)\",\n    y = \"Body Mass (g)\",\n    colour = \"Penguin Species\"\n  ) +\n  theme_minimal() +\n  theme(\n    legend.position = \"bottom\",\n    plot.title = element_text(face = \"bold\"),\n    axis.title = element_text(face = \"italic\")\n  )\n```\n:::\n\n\n\n\n## Resources for further learning\n\n- [R Graphics Cookbook](https://r-graphics.org/)\n- [ggplot2 documentation](https://ggplot2.tidyverse.org/)\n- [R for Data Science](https://r4ds.had.co.nz/)\n\n# References and resources\n\n## Core reading\n\n- Wickham, H. (2016). *ggplot2: Elegant Graphics for Data Analysis*. Springer.\n- Chang, W. (2018). *R Graphics Cookbook*. O'Reilly Media.\n- Wickham, H., & Grolemund, G. (2017). *R for Data Science*. O'Reilly Media.\n\n## Online resources\n\n- [ggplot2 documentation](https://ggplot2.tidyverse.org/)\n- [R for Data Science - Data Visualization chapter](https://r4ds.had.co.nz/data-visualisation.html)\n- [The R Graph Gallery](https://www.r-graph-gallery.com/)\n- [Cookbook for R - Graphs](http://www.cookbook-r.com/Graphs/)\n\n# Thanks!\n\nThis presentation is based on the [SOLES Quarto reveal.js template](https://github.com/usyd-soles-edu/soles-revealjs) and is licensed under a [Creative Commons Attribution 4.0 International License][cc-by].\n\n\n<!-- Links -->\n[cc-by]: http://creativecommons.org/licenses/by/4.0/\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}