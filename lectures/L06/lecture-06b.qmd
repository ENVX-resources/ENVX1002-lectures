---
title: "Topic 6 -- Two-sample $t$-tests -- Part II"
subtitle: School of Life and Environmental Sciences (SOLES)
author:
  - name: Januar Harianto
    affiliations: The University of Sydney
date: last-modified
self-contained: true
format: soles-revealjs
---

# When assumptions of the $t$-test are violated

## Recap: Assumptions of the two-sample $t$-test

### With independent samples:

- **Normality**: the data are normally distributed
- **Homogeneity of variance** (equal variances): the variances of the two groups are equal

### With paired samples:

- **Normality**: the differences between the paired samples are normally distributed
- Equal variances is implied

## If we analyse the data anyway...

The $t$-test:

- may provide incorrect results as **mean and variance calculations depend on normally distributed data**.
- may be **less powerful** (i.e., less likely to detect a true difference).
- may be **biased** (i.e., systematically over- or under-estimating the true difference).

# Don't throw the data away...

## What can we do?

The $t$-test is quite robust to violations of normality, especially when the sample size is large. However, the assumption of equal variances is more critical â€“ we cannot simply depend on large sample sizes to "fix" the problem.

Options include:

- **Transform** the data to normalise the data and/or scale the variance
- Use a **Welch's $t$-test** or a **Welch's ANOVA** (limited cases)
- Use a **non-parametric test**, such as the **Mann-Whitney U test** or **Wilcoxon signed-rank test** (paired samples) -- however, these tests have *less power* than the $t$-test i.e. less likely to detect a true difference.


# Ants - a foraging biomass study

![*Formica rufa*, the horse ant - native to Eurasia.](images/formica_rufa.jpg) {fig-align="left"}

## Is the food collected by ants different between two sites?

### Data structure

```{r}
#| code-fold: true
library(tidyverse)
ants <- read.csv("data/ants.csv") %>%
  mutate(Tree = factor(Tree))

glimpse(ants)
```

We want to compare the mean biomass of food, collected by ants between the two sites in **dry weight (mg) of prey, divided by the total number of ants leaving the tree in 30 minutes**.

## Visualising the data

```{r}
#| code-fold: true
library(ggplot2)
p_ants <-
  ggplot(ants, aes(x = Tree, y = Food)) +
  geom_boxplot() +
  ylab("Biomass of food (mg per ant)") +
  theme_minimal()

p_ants
```

Does this data meet the assumptions of the two-sample $t$-test?

## Checking assumptions

We have some idea that the data may not be normally distributed, but are not quite sure. So let's check using the Q-Q plot.

```{r}
#| code-fold: true

ggplot(ants, aes(sample = Food)) +
  stat_qq() +
  stat_qq_line() +
  facet_wrap(~Tree) +
  theme_minimal()
```

::: incremental
- Curvature of the data points away from the line indicates non-normality.
- Boxplots (previous slide) suggest equal variances.
- **Let's transform the data.**
:::



## Picking a transformation

We need to consider the **type of data** and the **shape of its distribution** when choosing a transformation. These can be assessed using:

::: incremental
- **Histograms** and **Q-Q plots** to assess normality - DONE
- **Box plots** to assess homogeneity of variance - DONE
- **Skewness** and **kurtosis** to assess the shape of the distribution - NEXT
:::


## Skewness

The degree of asymmetry in the data distribution when compared to a normal distribution.

::: fragment
- Represented by the **skewness coefficient** ($\gamma_1$) and can be positive, negative, or zero.
- Skewness values between **-0.5 and 0.5** are considered acceptable (fairly symmetrical).
- **Negative** skewness indicates a *left*-skewed distribution, while **positive** skewness indicates a *right*-skewed distribution.
- Above 1 or below -1, the distribution is considered ***highly* skewed**.
:::

## Example: skewness


```{r}
#| code-fold: true

library(tidyverse)
library(patchwork)

x <- seq(0, 1, length.out = 100)

# Calculate the density of the Beta distribution at these points
data1 <- data.frame(x = x, y = dbeta(x, 5, 2), dist = "Negative (left) skewed")
data2 <- data.frame(x = x, y = dbeta(x, 5, 5), dist = "Symmetrical")
data3 <- data.frame(x = x, y = dbeta(x, 2, 5), dist = "Positive (right) skewed")
data <- rbind(data1, data2, data3) %>%
  mutate(dist = factor(dist, levels = c("Negative (left) skewed", "Symmetrical", "Positive (right) skewed")))

# Create the plot
ggplot(data, aes(x = x, y = y)) +
  geom_line(color = "skyblue") +
  geom_area(fill = "skyblue", alpha = 0.4) +
  theme_minimal() +
  theme(axis.text = element_blank(), axis.ticks = element_blank()) +
  facet_wrap(~dist) +
  ylab("density") +
  xlab("")
```

## Kurtosis

Used to describe the extreme values (outliers) in the distribution versus the tails.

::: fragment
- **High kurtosis (>3)** indicates a distribution with **heavy tails** and a **peaked centre**. When this happens, we should investigate the data for outliers.
- **Low kurtosis (<3)** indicates a distribution with **light tails** and a **flat centre**. There are fewer to no outliers in the data.
:::


## Example: kurtosis

```{r}
#| code-fold: true


library(tidyverse)
library(patchwork)
library(moments)

# Generate data
set.seed(123)
x1 <- seq(-10, 10, length.out = 1000)
x2 <- seq(-5, 5, length.out = 1000)
data1 <- data.frame(x = x1, y = dt(x1, df = 1), dist = "High Kurtosis")
data2 <- data.frame(x = x2, y = dt(x2, df = 10), dist = "Low Kurtosis")
data <- rbind(data1, data2) %>%
  mutate(dist = factor(dist, levels = c("High Kurtosis", "Low Kurtosis")))

# Create the plot
ggplot(data, aes(x = x, y = y)) +
  geom_line(color = "skyblue") +
  geom_area(fill = "skyblue", alpha = 0.4) +
  theme_minimal() +
  theme(axis.text = element_blank(), axis.ticks = element_blank()) +
  facet_wrap(~dist, scales = "free_x") +
  ylab("density") +
  xlab("")
```


## Skewness and kurtosis in the ants data

With experience we can "eyeball" the data, but we can also calculate the skewness and kurtosis.

```{r}
ants %>%
  group_by(Tree) %>%
  summarise(skewness = skewness(Food), kurtosis = kurtosis(Food))
```

```{r}
#| echo: false
p_ants
```

::: fragment
From the results we can see that both sites have a **positive skewness**. Site `Rowan` has high kurtosis.
:::



# Data transformation



## Workflow

::: incremental
1. Check the data for normality and homogeneity of variance (i.e. **test assumptions**). 
2. If the assumptions are violated, consider **transforming the data**.
3. **Repeat** checks on assumptions. If assumptions are **met**, proceed with the $t$-test on the transformed scale. *Otherwise, use a different transformation or consider using a non-parametric test.*
4. Interpret the statistical results and **back-transform the results** to the original scale (optional but recommended) to aid interpretation.
:::


## Picking a transformation

::: fragment
### For positive skewness

- **Square root** transformation: $\sqrt{x}$ for skewness between 0.5 and 1 and kurtosis < 3.
- **Logarithmic** transformation: $\log(x)$ for skewness > 1 and kurtosis < 3.
- **Reciprocal** transformation: $\frac{1}{x}$ for skewness > 1 and kurtosis > 3 (quite extreme).
:::


::: fragment
### For negative skewness
- This is rare as most biological data are positively skewed. However, you can try the **square** $x^2$ or **cube** $x^3$ transformation.
- If negatively skewed data contains zeros, consider using the log transform and adding a constant to the data before transformation e.g. $\log(x + 1)$.
:::

::: fragment
::: callout-note
There is also the **Box-Cox transformation** which informs us of the best transformation to apply to the data without the need to check skewness and kurtosis. This method is not covered in this unit, but you can read more about it [here](https://r-coder.com/box-cox-transformation-r/) (the simple R version) or [here](https://en.wikipedia.org/wiki/Power_transform#Box%E2%80%93Cox_transformation) (more detailed mathematical explanation).
:::
:::

## How do we check if the transformation worked?

We need to apply the transformation to the entire dataset and check the Q-Q plot again.

```{r}
ants$Food_log <- log(ants$Food)
```

```{r}
#| code-fold: true

# compare the Q-Q plot before and after transformation
pfood <- ggplot(ants, aes(sample = Food)) +
  stat_qq() +
  stat_qq_line() +
  facet_wrap(~Tree) +
  ggtitle("Before transformation") +
  theme_classic()

pfoodlog <- ggplot(ants, aes(sample = Food_log)) +
  stat_qq() +
  stat_qq_line() +
  facet_wrap(~Tree) +
  ggtitle("After transformation") +
  theme_classic()

pfood / pfoodlog
```

## Checking skewness and kurtosis after transformation

```{r}
ants %>%
  group_by(Tree) %>%
  summarise(skewness = skewness(Food_log), kurtosis = kurtosis(Food_log))
```

## Performing the $t$-test

```{r}
fit <- t.test(Food_log ~ Tree, data = ants, var.equal = TRUE)
fit
```


::: fragment
### How do we interpret the results?

Evidence suggests that the log-transformed mean biomass of food collected by ants from the Rowan site is significantly different from the log-transformed mean biomass of food collected by ants from the Sycamore site (t = -2.05, df = 52, p = 0.045).
:::


## Back-transforming the results

- For power transformations, we can back-transform the results to the original scale using the inverse function.
- Log transformations are a bit tricky as the inverse function is the exponential function.
  - For the natural log transformation which is `log()` in R, the inverse function is the exponential function: $e^x$.
  - For the base 10 log transformation which is `log10()` in R, the inverse function is $10^x$.

## Interpretation

### Back-transforming mean values

```{r}
browan <- exp(fit$estimate[[1]]) # mean biomass from the Rowan site
bsycamore <- exp(fit$estimate[[2]]) # mean biomass from the Sycamore site

# check the ratio
bsycamore / browan
```

> Evidence suggests that the log-transformed mean biomass of food collected by ants from the Rowan site is significantly different from the log-transformed mean biomass of food collected by ants from the Sycamore site (t = -2.05, df = 52, p = 0.045).

The mean biomass of food collected by ants from the Sycamore site (`r round(bsycamore, 1)` mg) is 1.4 times greater than the mean biomass of food collected by ants from the Rowan site (`r round(browan, 1)` mg).

### Back-transforming confidence intervals

```{r}
ant_ci <- exp(fit$conf.int)
ant_ci
```



## Comparing to a test without transformation

```{r}
fit2 <- t.test(Food ~ Tree, data = ants, var.equal = TRUE)
fit2
```

:::: columns
::: column
- Original mean values: 
  - Rowan = `r round(fit2$estimate[[1]], 1)` mg
  - Sycamore = `r round(fit2$estimate[[2]], 1)` mg
- Log-transformed mean values: 
  - Rowan = `r round(fit$estimate[[1]], 1)` lg(mg)
  - Sycamore = `r round(fit$estimate[[2]], 1)` lg(mg)
- Back-transformed mean values: 
  - **Rowan = `r round(browan, 1)` mg**
  - **Sycamore = `r round(bsycamore, 1)` mg**
  

The original mean values are based on the arithmetic mean, while the log-transformed mean values are based on the geometric mean. The geometric mean is more appropriate for skewed data.

:::

::: column
- Original 95% confidence interval: 
  - `r round(fit2$conf.int[1], 1)` to `r round(fit2$conf.int[2], 1)` mg
- Log-transformed 95% confidence interval:
  - `r round(ant_ci[1], 1)` to `r round(ant_ci[2], 1)` lg(mg)
- Back-transformed 95% confidence interval:
  - **`r round(exp(ant_ci[1]), 1)` to `r round(exp(ant_ci[2]), 1)` mg**

The influence of kurtosis on the 95% confidence interval is evident when comparing the original and back-transformed confidence intervals, as the log transform reduces the effect of outliers on the data.
:::
::::



# Thanks!

This presentation is based on the [SOLES Quarto reveal.js template](https://github.com/usyd-soles-edu/soles-revealjs) and is licensed under a [Creative Commons Attribution 4.0 International License][cc-by].


<!-- Links -->
[cc-by]: http://creativecommons.org/licenses/by/4.0/